{"version":3,"sources":["components/Chart/Chart.module.css","components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","images/image.png","App.js","index.js","components/CountryPicker/CountryPicker.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cs","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","modifiedData","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchApi","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","fetchAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","class","hello","App","state","fetchedData","setState","this","image","src","corona","alt","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d71ef706.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\nimport {Card,CardContent,Typography,Grid} from '@material-ui/core';\nimport styles from './Cards.module.css';\nimport CountUp from 'react-countup';\nimport cs from 'classnames';\n\nconst Cards = ({data:{confirmed,recovered,deaths,lastUpdate}}) => {\n    if(!confirmed){\n        return 'Loading...!!';\n    }\n    return (\n        <div className={styles.container}>\n            <Grid container spacing={3} justify=\"center\">\n                <Grid item component={Card} xs={12} md={3} className={cs(styles.card,styles.infected)}>\n                    <CardContent>\n                        <Typography color=\"textPrimary\" gutterBottom><strong>Infected</strong></Typography>\n                        <Typography variant=\"h5\"><CountUp start={0} end={confirmed.value} duration={2.5} separator=\",\"/></Typography>\n                        <Typography color=\"textPrimary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of active cases of covid19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cs(styles.card,styles.recovered)}>\n                    <CardContent>\n                        <Typography color=\"textPrimary\" gutterBottom><strong>Recovered</strong></Typography>\n                        <Typography variant=\"h5\"><CountUp start={0} end={recovered.value} duration={2.5} separator=\",\"/></Typography>\n                        <Typography color=\"textPrimary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of patients recovered from covid19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cs(styles.card,styles.deaths)}>\n                    <CardContent>\n                        <Typography color=\"textPrimary\" gutterBottom><strong>Deaths</strong></Typography>\n                        <Typography variant=\"h5\"><CountUp start={0} end={deaths.value} duration={2.5} separator=\",\"/></Typography>\n                        <Typography color=\"textPrimary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Cards\n","import axios from 'axios';\n\nconst url = 'http://covid19.mathdro.id/api';\n\nexport const fetchData = async (country)=>{\n\n    let changeableUrl = url;\n    if(country){\n        changeableUrl = `${url}/countries/${country}`\n    }\n\n    try {\n        const {data:{confirmed,recovered,deaths,lastUpdate}} = await axios.get(changeableUrl);\n\n        const modifiedData = {\n            confirmed,\n            recovered,\n            deaths,\n            lastUpdate,\n        }\n        return modifiedData;\n    } catch (error) {\n        \n    }\n}\n\nexport const fetchDailyData = async ()=> {\n    try {\n        const {data} = await axios.get(`${url}/daily`);\n        const modifiedData =data.map((dailyData)=>({\n            confirmed:dailyData.confirmed.total,\n            deaths:dailyData.deaths.total,\n            date:dailyData.reportDate,\n        }));\n        return modifiedData;\n    } catch (error) {\n        \n    }\n}\n\nexport const fetchCountries = async ()=> {\n    try {\n        const {data:{countries}} = await axios.get(`${url}/countries`);\n        return countries.map((country)=>country.name);\n    } catch (error) {\n        \n    }\n}","import React, {useState,useEffect} from 'react';\nimport { fetchDailyData } from '../../api';\nimport {Line,Bar} from 'react-chartjs-2';\nimport styles from './Chart.module.css';\n\nconst Chart = ({data:{confirmed,recovered,deaths},country}) => {\n    const [dailyData,setDailyData] = useState([]);\n\n    useEffect(()=>{\n        const fetchApi = async () => {\n            setDailyData(await fetchDailyData());\n        }\n        fetchApi();\n    },[]);\n    const lineChart =(\n        dailyData.length ? (<Line data={{\n            labels:dailyData.map(({date})=>date),\n            datasets:[{\n                data:dailyData.map(({confirmed})=>confirmed),\n                label:'Infected',\n                borderColor:'#3333ff',\n                fill:true,\n            },\n            {\n                \n                data:dailyData.map(({deaths})=>deaths),\n                label:'Deaths',\n                borderColor:'red',\n                backgroundColor:'rgba(255,0,0,0.5)',\n                fill:true,\n            }],\n        }}\n        />):null\n    );\n\n    const barChart = (\n        confirmed?(\n            <Bar\n                data={{\n                    labels:['Infected','Recovered','Deaths'],\n                    datasets:[{\n                        label:\"People\",\n                        backgroundColor:[\n                            'rgba(0,0,255,0.5)',\n                            'rgba(0, 255,0, 0.5)',\n                            'rgba(255, 21, 21,0.5)', \n                        ],\n                        data:[confirmed.value,recovered.value,deaths.value]\n                    }]\n                }}\n                options={{\n                    legend: {display:false},\n                    title: {display:true, text:`Current state in ${country}`}\n                }}\n            />\n        ):null\n    )\n\n    return (\n        <div className={styles.container}>\n            {country ? barChart:lineChart}\n        </div>\n    )\n}\n\nexport default Chart\n","import React,{useState,useEffect} from 'react';\nimport { NativeSelect , FormControl } from '@material-ui/core';\n\nimport styles from './CountryPicker.module.css';\nimport {fetchCountries} from '../../api';\n\nconst CountryPicker = ({ handleCountryChange }) => {\n    const [fetchedCountries,setFetchedCountries] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async ()=> {\n            setFetchedCountries(await fetchCountries());\n        }\n        fetchAPI();\n    },[setFetchedCountries])\n    return (\n        <FormControl className={styles.formControl}>\n            <NativeSelect defaultValue=\"\" onChange={(e)=> handleCountryChange(e.target.value)}  >\n                <option value=\"\">Global</option>\n                {fetchedCountries.map((country,i)=> <option class={styles.hello} key={i} value={country}>{country}</option>)}\n            </NativeSelect>\n        </FormControl>\n    )\n}\n\nexport default CountryPicker\n","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import React, { Component } from 'react'\nimport {Cards,Chart,CountryPicker} from './components';\nimport styles from './App.module.css';\nimport { fetchData } from './api';\nimport corona from './images/image.png';\n\nexport default class App extends Component {\n    state={\n        data: {},\n        country:'',\n    }\n\n    async componentDidMount(){\n        const fetchedData = await fetchData();\n\n        this.setState({data:fetchedData});\n    }\n    handleCountryChange = async (country) => {\n        const fetchedData = await fetchData(country);\n        this.setState({data:fetchedData,country: country});\n    }\n    \n    render() {\n        const {country,data} = this.state;\n        return (\n            \n            <div className={styles.container}>\n                <img className={styles.image} src={corona} alt=\"COVID-19\" />\n                <Cards data={data}/>\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\n                <Chart data={data} country={country}/>\n                \n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n    <App />,\n  \n  document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};"],"sourceRoot":""}